<?php
// $Id$

/**
 * For the collection of memcache stats. This small .js file makes sure that the
 * HTML displaying the stats is inside of the <body> part of the HTML
 * document.
 */
function memcache_admin_init() {
  if (strstr($_SERVER['PHP_SELF'], 'update.php') || strstr($_GET['q'], 'autocomplete')) {
    // update.php relies on standard error handler
  }
  else {
    drupal_add_js(drupal_get_path('module', 'memcache_admin'). '/memcache.js');
    register_shutdown_function('memcache_admin_shutdown');
  }
}

function memcache_admin_perm() {
  return array('access memcache statistics');
}

function memcache_admin_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/memcache',
      'title' => t('Memcache'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('memcache_admin_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM
    );
    $items[] = array(
      'path' => 'admin/logs/memcache',
      'callback' => 'memcache_admin_stats',
      'title' => t('Memcache status'),
      'access' => user_access('access memcache statistics'),
      'description' => t("View the statistics for this site's memcache and generate new settings."),
      'weight' => 1,
    );
  }

  else if (arg(0) == 'admin' && arg(1) == 'logs' && arg(2) == 'memcache') {
    $memache_servers = variable_get('memcache_servers', array());
    $clusters = array();
    foreach($memache_servers as $server => $cluster) {
      $clusters[$cluster]['servers'][] = $server;
      $clusters[$cluster]['bin'] = _memcache_admin_get_bin_for_cluster($cluster);
    }

    $count = 0;
    foreach($clusters as $cluster => $cluster_info) {
      if ($cluster_info['bin']) {

        $items[] = array(
          'path' => 'admin/logs/memcache/' . $cluster,
          'type' =>  MENU_LOCAL_TASK,
          'callback' => 'memcache_admin_stats',
          'callback arguments' => array($cluster),
          'title' => $cluster,
          'access' => user_access('access memcache statistics'),
          'weight' => $count,
        );

        $count++;
      }
    }

    if ($cluster = arg(3)) {
      $count = 0;
      foreach(array('default', 'reset', 'malloc', 'maps', 'cachedump', 'slabs', 'items', 'sizes') as $type) {
        $items[] = array(
          'path' => 'admin/settings/memcache/' . $cluster . '/' . $type,
          'type' => $type == 'default' ?  MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
          'callback' => 'memcache_admin_stats',
          'callback arguments' => array($cluster, $type),
          'title' => $type,
          'access' => user_access('access memcache statistics'),
          'weight' => $count,
        );

        $count++;
      }
    }
    else {
      drupal_goto('admin/logs/memcache/default');
    }
  }

  return $items;
}

function memcache_admin_admin_settings() {
  $form['show_memcache_statistics'] = array('#type' => 'checkbox',
    '#title' => t('Show memcache statistics at the bottom of each page'),
    '#default_value' => variable_get('show_memcache_statistics', 1),
    '#description' => t("These statistics will be visible to users with the 'access memcache statistics' permission."),
  );
  return system_settings_form($form);
}

function memcache_admin_stats($cluster = 'default', $type = 'default') {
  $bin = _memcache_admin_get_bin_for_cluster($cluster);

  if ($bin) {
    $stats = dmemcache_stats($bin, $type);

    if (is_array($stats) && count($stats)) {
      $output = "";

      foreach ($stats as $server => $values) {
        if (is_array($values)) {
          $output .= theme('memcache_admin_stats_table', $server, $values);
        }
        else {
          drupal_set_message(t('Unable to connect to server: %server', array('%server' => $server)));
        }
      }
    }

    else {
      $output = '';
      drupal_set_message(t('No available statistics for this bin.'));
    }
  }

  return $output;
}



function theme_memcache_admin_stats_table($server, $stats) {
  $rows = array();

  foreach ($stats as $key => $value) {
    if (is_array($value)) {
      $rs = array();
      foreach ($value as $k => $v) {
        $rs[] = array($k, $v);
      }
      $rows[] = array($key, theme('table', array('',''), $rs));
    }
    else {
      $rows[] = array($key, $value);
    }
  }

  return theme('table', array(t('Property'), t('Value')), $rows, array(), $server);
}



function _memcache_admin_get_bin_for_cluster($cluster) {
  static $cluster_map = array();

  if (!isset($cluster_map[$cluster])) {
    $memache_bins = variable_get('memcache_bins', array());
    if ($mapping = array_search($cluster, $memache_bins)) {
      $cluster_map[$cluster] = $mapping;
    }
    else {
      $cluster_map[$cluster] = 'default';
    }
  }

  return $cluster_map[$cluster];
}

/**
 * See memcache_admin_init() which registers this function as a shutdown function.
 * Displays memcache stats in the footer.
 */
function memcache_admin_shutdown() {
  global $user, $_memcache_statistics;

  // Try not to break non html pages.
  if (function_exists('drupal_get_headers')) {
    $headers = drupal_get_headers();
    if(strstr($headers, 'xml') || strstr($headers, 'javascript') || strstr($headers, 'plain')) {
      return;
    }
  }

  if (variable_get('show_memcache_statistics', TRUE) && user_access('access memcache statistics')) {
    $stats = array();

    foreach ($_memcache_statistics as $stat => $val) {
      $stats[] = "<strong>$stat:</strong> ". theme('item_list', $val);
    }
    if (!empty($stats)) {
      $output = theme('item_list', $stats);

      // this makes sure all of the HTML is within the <body> even though this <script> is outside it
      print '<div id="memcache-devel"><h2>'. t('Memcache statistics'). '</h2>'. $output. '</div>';
    }
  }
}
